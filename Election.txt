Assign06Bully
import java.util.Scanner;

public class Bully {
    int coordinator;
    boolean processes[];

    public Bully(int max) {
        processes = new boolean[max];
        coordinator = max;

        System.out.println("Creating processes..");
        for(int i = 0; i < max; i++) {
            processes[i] = true;
            System.out.println("P"+ (i+1) + " created");
        }
        System.out.println("Process P" + coordinator + " is the coordinator");
    }

    void displayProcesses() {
        for(int i = 0; i < processes.length; i++) {
            System.out.println("P" + (i+1) + " is " + (processes[i] ? "up" : "down"));
        }
        System.out.println("Process P" + coordinator + " is the coordinator");
    }

    void runElection(int process_id) {
        coordinator = process_id;
        System.out.println("Election message sent from process " + process_id + " to higher priority processes.");

        for(int i = process_id; i < processes.length; i++) {
            if(processes[i]) {
                runElection(i + 1);
                break;
            }
        }
    }

    public static void main(String args[]) {
        Bully bully = null;
        int choice = 0;
        Scanner sc = new Scanner(System.in);

        while(true) {
            System.out.println("Bully Algorithm");
            System.out.println("1. Create processes");
            System.out.println("2. Display processes");
            System.out.println("3. Run election algorithm");
            System.out.println("4. Exit Program");
            System.out.print("Enter your choice:- ");
            choice = sc.nextInt();

            switch(choice) {
                case 1: 
                    System.out.print("Enter the number of processes:- ");
                    int max_processes = sc.nextInt();
                    bully = new Bully(max_processes);
                    break;
                case 2:
                    bully.displayProcesses();
                    break;
               
                case 3:
                    System.out.print("Enter the process number which will perform election:- ");
                    int election_process = sc.nextInt();
                    bully.runElection(election_process);
                    bully.displayProcesses();
                    break;
                case 4:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Error in choice. Please try again.");
                    break;
            }
        }
    }
}


Assign06Ring
import java.util.ArrayList;
import java.util.Scanner;

public class Ring {
    int max_processes;
    int coordinator;
    boolean processes[];

    public Ring(int max) {
        coordinator = max;
        max_processes = max;
        processes = new boolean[max];

        for (int i = 0; i < max; i++) {
            processes[i] = true;
            System.out.println("P" + (i + 1) + " created.");
        }
        System.out.println("P" + coordinator + " is the coordinator");
    }

    void displayProcesses() {
        for (int i = 0; i < max_processes; i++) {
            System.out.println("P" + (i + 1) + " is " + (processes[i] ? "up." : "down."));
        }
        System.out.println("P" + coordinator + " is the coordinator");
    }

    void initElection(int process_id) {
        ArrayList<Integer> pid = new ArrayList<>();
        int temp = process_id;

        do {
            if (processes[temp - 1]) {
                pid.add(temp);
                System.out.print("Process P" + temp + " sending the following list:- " + pid + "\n");
            }
            temp = (temp % max_processes) + 1;
        } while (temp != process_id);

        coordinator = pid.stream().max(Integer::compare).orElse(coordinator);
        System.out.println("Process P" + process_id + " has declared P" + coordinator + " as the coordinator");
    }

    public static void main(String args[]) {
        Ring ring = null;
        int choice = 0;
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("Ring Algorithm");
            System.out.println("1. Create processes");
            System.out.println("2. Display processes");
            System.out.println("3. Run election algorithm");
            System.out.println("4. Exit Program");
            System.out.print("Enter your choice:- ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the total number of processes:- ");
                    int max_processes = sc.nextInt();
                    ring = new Ring(max_processes);
                    break;
                case 2:
                    ring.displayProcesses();
                    break;
                case 3:
                    System.out.print("Enter the process which will initiate election:- ");
                    int election_process = sc.nextInt();
                    ring.initElection(election_process);
                    break;
                case 4:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Error in choice. Please try again.");
                    break;
            }
        }
    }
}
